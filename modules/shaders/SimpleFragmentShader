#version 330 core

in vec3 vertexPosition;
in vec3 vertexNormal;

uniform vec3 lightPos;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 cameraPos;

out vec3 color;

void main()
{
    vec3 lightDirection = lightPos - vertexPosition;

    float lightDistance = length(lightDirection);

    vec3 n = normalize(vertexNormal);
    vec3 l = normalize(lightDirection);
    float NdotL = clamp(dot(n, l), 0, 1);

    vec3 posToCam = normalize(cameraPos - vertexPosition);
    vec3 reflection = reflect(-l, n);
    float CdotR = clamp(dot(posToCam, reflection), 0, 1);

    color = diffuseColor * NdotL + specularColor * pow(CdotR, 5);
}
